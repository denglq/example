.\" Automatically generated by Pod::Man 2.16 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Hoola 3thr"
.TH Hoola 3thr "2009-04-16" "FCFS RWLock" "FCFS RWLock"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pthread_rwlock_fcfs_alloc, 
pthread_rwlock_fcfs_gain_read, pthread_rwlock_gain_write, 
pthread_rwlock_fcfs_timed_gain_read, pthread_rwlock_fcfs_timed_gain_write,
pthread_rwlock_fcfs_try_gain_read, pthread_rwlock_fcfs_try_gain_write,
pthread_rwlock_fcfs_release,
pthread_rwlock_fcfs_destroy \- operations on a first\-come first\-served 
readers/writers lock.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fB#include <pthread/rwlock_fcfs.h>\fR
.PP
\&\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR = \fBpthread_rwlock_fcfs_alloc\fR();
.PP
\&\fBint\fR \fBpthread_rwlock_fcfs_gain_read\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR);
.PP
\&\fBint\fR \fBpthread_rwlock_fcfs_gain_write\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR);
.PP
\&\fBint\fR \fBpthread_rwlock_fcfs_try_gain_read\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR);
.PP
\&\fBint\fR \fBpthread_rwlock_fcfs_try_gain_write\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR);
.PP
\&\fBint\fR \fBpthread_rwlock_fcfs_timed_gain_read\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR, \fBconst struct timespec\fR * \fIabstime\fR, \fBint\fR (*\fIcontinue_callback\fR)(\fBvoid\fR * context), \fBvoid\fR * \fIcontext\fR);
.PP
\&\fBint\fR \fBpthread_rwlock_fcfs_timed_gain_write\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR, \fBconst struct timespec\fR * \fIabstime\fR, \fBint\fR (*\fIcontinue_callback\fR)(\fBvoid\fR * context), \fBvoid\fR * \fIcontext\fR);
.PP
\&\fBvoid\fR \fBpthread_rwlock_fcfs_release\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR);
.PP
\&\fBvoid\fR \fBpthread_rwlock_fcfs_destroy\fR(\fBpthread_rwlock_fcfs_t\fR * \fIrwlock\fR);
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Readers/Writers Lock (or \*(L"rwlock\*(R" for short) is a mechanism that allows an 
arbitrary number of readers, or alternatively one and only one writer to 
access a resource at a given time. A First-Come First-Served RWLock makes sure
every pending thread will get its turn eventually.
.PP
To create a new rwlock call \fBpthread_rwlock_fcfs_alloc\fR(). From then on, more
than one thread can use the lock simultaneously.
.PP
\&\fBpthread_rwlock_fcfs_gain_read\fR and \fBpthread_rwlock_fcfs_gain_write\fR can be
used to gain read or write access for \fIrwlock\fR. They block indefinitely until
the access is granted. They return 0 on success or \-1 if the lock is
going to be destroyed and should no longer be accessed.
.PP
\&\fBpthread_rwlock_fcfs_try_gain_read\fR and \fBpthread_rwlock_fcfs_try_gain_write\fR
attempt to gain a read or write permission and if they do not succeed they 
exit immediately. They return 0 upon success, \-1 if the lock is going
to be destroyed, and non-zero otherwise.
.PP
\&\fBpthread_rwlock_fcfs_timed_gain_read\fR and \fBpthread_rwlock_fcfs_timed_gain_write\fR 
attempt to gain a permission while initially waiting until \fIabstime\fR. If by 
that time access is not granted, then \fIcontinue_callback\fR will be called to 
find out if the functions should continue waiting.
.PP
\&\fIcontinue_callback\fR is responsible for setting a new value for \fIabstime\fR and
should return 1 if it wishes to continue wait for a permission or 0 otherwise. 
\&\fIcallback_context\fR is the argument which it receives as an argument.
.PP
If \fIcontinue_callback\fR is set to \s-1NULL\s0, then it will be ignored, and the 
function will terminate once the initial wait is over.
.PP
\&\fBpthread_rwlock_fcfs_timed_gain_read\fR and \fBpthread_rwlock_fcfs_timed_gain_write\fR 
return 0 upon success, 1 if they failed to gain a read or write permission
and \-1 if the lock is going to be destroyed.
.PP
\&\fBpthread_rwlock_fcfs_release\fR releases a previously granted 
read or write permission.
.PP
\&\fBpthread_rwlock_fcfs_destroy\fR can be used to destroy a previously allocated
\&\fIrwlock\fR.
.SH "ASYNC-SIGNAL SAFETY"
.IX Header "ASYNC-SIGNAL SAFETY"
These RWLock functions are not async-signal safe, and should not be called
from a signal handler.
.SH "RETURN VALUE"
.IX Header "RETURN VALUE"
All the rwlock functions return 0 on success, \-1 if the rwlock is going
to be destroyed, and a non-zero error code on error.
.SH "AUTHOR"
.IX Header "AUTHOR"
Shlomi Fish <shlomif@vipe.technion.ac.il>.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
See the \fItest_rwlock.c\fR file inside the pthreads' \s-1FCFS\s0 RWLock distribution.
